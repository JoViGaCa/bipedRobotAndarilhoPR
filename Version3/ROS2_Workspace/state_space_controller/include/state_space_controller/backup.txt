#include <iostream>
#include <eigen3/Eigen/Dense>

class state_space_controller{
    private:
        double state_vector[3] = {0,0,0}, state_back = 0;
        double matrixA[3][3] = {{1, 0.05, 0.0013},{0, 1, 0.05},{0, 0, 1}};
        double matrixB[3] = {0, 0.0013, 0.05};
        double matrixC[3] = {1, 0, -0.0163};
        double matrixK[3] = {0.9511, 1.9367, 1.9562};
        double aux1[3] = {0,0,0}, aux3[3] = {0,0,0};
        double pref[125] = {};
        //double pref[125] = {};
    public:
        double applyController(double position, double velocity, double accel, int count);
        double getZMP(int count);

};





#include "state_space_controller/state_space_controller.h"
#include <iostream>


    double state_space_controller::applyController(double position, double velocity, double accel, int count){
        //-kx(t)
        state_back = (position*matrixK[0] + velocity*matrixK[1] + accel*matrixK[2]);
        //state_back = (state_vector[0]*matrixK[0] + state_vector[1]*matrixK[1] + state_vector[2]*matrixK[2]);
        //std::cout << "State Back: " << state_back << "\n";
        

        // B*u, and, u = (pref - state_back)
        aux1[0] = matrixB[0]*(pref[count] - state_back);
        aux1[1] = matrixB[1]*(pref[count] - state_back);
        aux1[2] = matrixB[2]*(pref[count] - state_back);
        //std::cout << "Aux1[0]: " << aux1[0] << "Aux1[1]: " << aux1[1] << "Aux1[2]: " << aux1[2] << "\n";

        // A*x
        aux3[0] = matrixA[0][0]*position + matrixA[0][1]*velocity + matrixA[0][2]*accel;
        aux3[1] = matrixA[1][0]*position + matrixA[1][1]*velocity + matrixA[1][2]*accel;
        aux3[2] = matrixA[2][0]*position + matrixA[2][1]*velocity + matrixA[2][2]*accel;
        //RCLCPP_INFO(rclcpp::get_logger("rclcpp"),"Aux3: %.5f - %.5f - %.5f", aux3[0], aux3[1], aux3[2]);

        state_vector[0] = aux1[0] + aux3[0];
        state_vector[1] = aux1[1] + aux3[1];
        state_vector[2] = aux1[2] + aux3[2];
        // std::cout << "State_Vector 0 :" << state_vector[0];

        return state_vector[0];
    }

    double state_space_controller::getZMP(int count){
        return pref[count];
    }
